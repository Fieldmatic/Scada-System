//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseManager.ScadaCoreReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ScadaCoreReference.IDatabaseManager", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IDatabaseManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/Registration", ReplyAction="http://tempuri.org/IDatabaseManager/RegistrationResponse")]
        bool Registration(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/Registration", ReplyAction="http://tempuri.org/IDatabaseManager/RegistrationResponse")]
        System.Threading.Tasks.Task<bool> RegistrationAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/Login", ReplyAction="http://tempuri.org/IDatabaseManager/LoginResponse")]
        string Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/Login", ReplyAction="http://tempuri.org/IDatabaseManager/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/Logout", ReplyAction="http://tempuri.org/IDatabaseManager/LogoutResponse")]
        bool Logout(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/Logout", ReplyAction="http://tempuri.org/IDatabaseManager/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/TagNameAvailable", ReplyAction="http://tempuri.org/IDatabaseManager/TagNameAvailableResponse")]
        bool TagNameAvailable(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/TagNameAvailable", ReplyAction="http://tempuri.org/IDatabaseManager/TagNameAvailableResponse")]
        System.Threading.Tasks.Task<bool> TagNameAvailableAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddTag", ReplyAction="http://tempuri.org/IDatabaseManager/AddTagResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaCoreWCF.models.DigitalInput))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaCoreWCF.models.AnalogInput))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaCoreWCF.models.DigitalOutput))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaCoreWCF.models.AnalogOutput))]
        bool AddTag(ScadaCoreWCF.models.Tag tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddTag", ReplyAction="http://tempuri.org/IDatabaseManager/AddTagResponse")]
        System.Threading.Tasks.Task<bool> AddTagAsync(ScadaCoreWCF.models.Tag tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RemoveTag", ReplyAction="http://tempuri.org/IDatabaseManager/RemoveTagResponse")]
        bool RemoveTag(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RemoveTag", ReplyAction="http://tempuri.org/IDatabaseManager/RemoveTagResponse")]
        System.Threading.Tasks.Task<bool> RemoveTagAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/LoadData")]
        void LoadData();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/LoadData")]
        System.Threading.Tasks.Task LoadDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetTagList", ReplyAction="http://tempuri.org/IDatabaseManager/GetTagListResponse")]
        string GetTagList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetTagList", ReplyAction="http://tempuri.org/IDatabaseManager/GetTagListResponse")]
        System.Threading.Tasks.Task<string> GetTagListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ChangeOTagValue", ReplyAction="http://tempuri.org/IDatabaseManager/ChangeOTagValueResponse")]
        void ChangeOTagValue(string name, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ChangeOTagValue", ReplyAction="http://tempuri.org/IDatabaseManager/ChangeOTagValueResponse")]
        System.Threading.Tasks.Task ChangeOTagValueAsync(string name, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetOutputTagList", ReplyAction="http://tempuri.org/IDatabaseManager/GetOutputTagListResponse")]
        string GetOutputTagList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetOutputTagList", ReplyAction="http://tempuri.org/IDatabaseManager/GetOutputTagListResponse")]
        System.Threading.Tasks.Task<string> GetOutputTagListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetInputTagList", ReplyAction="http://tempuri.org/IDatabaseManager/GetInputTagListResponse")]
        string GetInputTagList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetInputTagList", ReplyAction="http://tempuri.org/IDatabaseManager/GetInputTagListResponse")]
        System.Threading.Tasks.Task<string> GetInputTagListAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/ChangeScanning")]
        void ChangeScanning(string Name, bool Scanning);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/ChangeScanning")]
        System.Threading.Tasks.Task ChangeScanningAsync(string Name, bool Scanning);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetTagByName", ReplyAction="http://tempuri.org/IDatabaseManager/GetTagByNameResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaCoreWCF.models.DigitalInput))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaCoreWCF.models.AnalogInput))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaCoreWCF.models.DigitalOutput))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaCoreWCF.models.AnalogOutput))]
        ScadaCoreWCF.models.Tag GetTagByName(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetTagByName", ReplyAction="http://tempuri.org/IDatabaseManager/GetTagByNameResponse")]
        System.Threading.Tasks.Task<ScadaCoreWCF.models.Tag> GetTagByNameAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/AddAlarmResponse")]
        bool AddAlarm(ScadaCoreWCF.models.Alarm alarm, string tagID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/AddAlarmResponse")]
        System.Threading.Tasks.Task<bool> AddAlarmAsync(ScadaCoreWCF.models.Alarm alarm, string tagID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetAlarmList", ReplyAction="http://tempuri.org/IDatabaseManager/GetAlarmListResponse")]
        string GetAlarmList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetAlarmList", ReplyAction="http://tempuri.org/IDatabaseManager/GetAlarmListResponse")]
        System.Threading.Tasks.Task<string> GetAlarmListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetAnalogInputList", ReplyAction="http://tempuri.org/IDatabaseManager/GetAnalogInputListResponse")]
        string GetAnalogInputList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetAnalogInputList", ReplyAction="http://tempuri.org/IDatabaseManager/GetAnalogInputListResponse")]
        System.Threading.Tasks.Task<string> GetAnalogInputListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AlarmNameAvailable", ReplyAction="http://tempuri.org/IDatabaseManager/AlarmNameAvailableResponse")]
        bool AlarmNameAvailable(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AlarmNameAvailable", ReplyAction="http://tempuri.org/IDatabaseManager/AlarmNameAvailableResponse")]
        System.Threading.Tasks.Task<bool> AlarmNameAvailableAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RemoveAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/RemoveAlarmResponse")]
        bool RemoveAlarm(string alarmName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RemoveAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/RemoveAlarmResponse")]
        System.Threading.Tasks.Task<bool> RemoveAlarmAsync(string alarmName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseManagerChannel : DatabaseManager.ScadaCoreReference.IDatabaseManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseManagerClient : System.ServiceModel.ClientBase<DatabaseManager.ScadaCoreReference.IDatabaseManager>, DatabaseManager.ScadaCoreReference.IDatabaseManager {
        
        public DatabaseManagerClient() {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Registration(string username, string password) {
            return base.Channel.Registration(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegistrationAsync(string username, string password) {
            return base.Channel.RegistrationAsync(username, password);
        }
        
        public string Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public bool Logout(string token) {
            return base.Channel.Logout(token);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync(string token) {
            return base.Channel.LogoutAsync(token);
        }
        
        public bool TagNameAvailable(string Name) {
            return base.Channel.TagNameAvailable(Name);
        }
        
        public System.Threading.Tasks.Task<bool> TagNameAvailableAsync(string Name) {
            return base.Channel.TagNameAvailableAsync(Name);
        }
        
        public bool AddTag(ScadaCoreWCF.models.Tag tag) {
            return base.Channel.AddTag(tag);
        }
        
        public System.Threading.Tasks.Task<bool> AddTagAsync(ScadaCoreWCF.models.Tag tag) {
            return base.Channel.AddTagAsync(tag);
        }
        
        public bool RemoveTag(string name) {
            return base.Channel.RemoveTag(name);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveTagAsync(string name) {
            return base.Channel.RemoveTagAsync(name);
        }
        
        public void LoadData() {
            base.Channel.LoadData();
        }
        
        public System.Threading.Tasks.Task LoadDataAsync() {
            return base.Channel.LoadDataAsync();
        }
        
        public string GetTagList() {
            return base.Channel.GetTagList();
        }
        
        public System.Threading.Tasks.Task<string> GetTagListAsync() {
            return base.Channel.GetTagListAsync();
        }
        
        public void ChangeOTagValue(string name, double value) {
            base.Channel.ChangeOTagValue(name, value);
        }
        
        public System.Threading.Tasks.Task ChangeOTagValueAsync(string name, double value) {
            return base.Channel.ChangeOTagValueAsync(name, value);
        }
        
        public string GetOutputTagList() {
            return base.Channel.GetOutputTagList();
        }
        
        public System.Threading.Tasks.Task<string> GetOutputTagListAsync() {
            return base.Channel.GetOutputTagListAsync();
        }
        
        public string GetInputTagList() {
            return base.Channel.GetInputTagList();
        }
        
        public System.Threading.Tasks.Task<string> GetInputTagListAsync() {
            return base.Channel.GetInputTagListAsync();
        }
        
        public void ChangeScanning(string Name, bool Scanning) {
            base.Channel.ChangeScanning(Name, Scanning);
        }
        
        public System.Threading.Tasks.Task ChangeScanningAsync(string Name, bool Scanning) {
            return base.Channel.ChangeScanningAsync(Name, Scanning);
        }
        
        public ScadaCoreWCF.models.Tag GetTagByName(string Name) {
            return base.Channel.GetTagByName(Name);
        }
        
        public System.Threading.Tasks.Task<ScadaCoreWCF.models.Tag> GetTagByNameAsync(string Name) {
            return base.Channel.GetTagByNameAsync(Name);
        }
        
        public bool AddAlarm(ScadaCoreWCF.models.Alarm alarm, string tagID) {
            return base.Channel.AddAlarm(alarm, tagID);
        }
        
        public System.Threading.Tasks.Task<bool> AddAlarmAsync(ScadaCoreWCF.models.Alarm alarm, string tagID) {
            return base.Channel.AddAlarmAsync(alarm, tagID);
        }
        
        public string GetAlarmList() {
            return base.Channel.GetAlarmList();
        }
        
        public System.Threading.Tasks.Task<string> GetAlarmListAsync() {
            return base.Channel.GetAlarmListAsync();
        }
        
        public string GetAnalogInputList() {
            return base.Channel.GetAnalogInputList();
        }
        
        public System.Threading.Tasks.Task<string> GetAnalogInputListAsync() {
            return base.Channel.GetAnalogInputListAsync();
        }
        
        public bool AlarmNameAvailable(string Name) {
            return base.Channel.AlarmNameAvailable(Name);
        }
        
        public System.Threading.Tasks.Task<bool> AlarmNameAvailableAsync(string Name) {
            return base.Channel.AlarmNameAvailableAsync(Name);
        }
        
        public bool RemoveAlarm(string alarmName) {
            return base.Channel.RemoveAlarm(alarmName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAlarmAsync(string alarmName) {
            return base.Channel.RemoveAlarmAsync(alarmName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ScadaCoreReference.ITrending", CallbackContract=typeof(DatabaseManager.ScadaCoreReference.ITrendingCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ITrending {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrending/TrendingConnection", ReplyAction="http://tempuri.org/ITrending/TrendingConnectionResponse")]
        string TrendingConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrending/TrendingConnection", ReplyAction="http://tempuri.org/ITrending/TrendingConnectionResponse")]
        System.Threading.Tasks.Task<string> TrendingConnectionAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrendingCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrending/ITagValueChanged")]
        void ITagValueChanged(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrendingChannel : DatabaseManager.ScadaCoreReference.ITrending, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrendingClient : System.ServiceModel.DuplexClientBase<DatabaseManager.ScadaCoreReference.ITrending>, DatabaseManager.ScadaCoreReference.ITrending {
        
        public TrendingClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TrendingClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TrendingClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TrendingClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TrendingClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string TrendingConnection() {
            return base.Channel.TrendingConnection();
        }
        
        public System.Threading.Tasks.Task<string> TrendingConnectionAsync() {
            return base.Channel.TrendingConnectionAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ScadaCoreReference.IRealTimeUnit", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IRealTimeUnit {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/AddressAvailable", ReplyAction="http://tempuri.org/IRealTimeUnit/AddressAvailableResponse")]
        bool AddressAvailable(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/AddressAvailable", ReplyAction="http://tempuri.org/IRealTimeUnit/AddressAvailableResponse")]
        System.Threading.Tasks.Task<bool> AddressAvailableAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/RTUIdAvailable", ReplyAction="http://tempuri.org/IRealTimeUnit/RTUIdAvailableResponse")]
        bool RTUIdAvailable(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/RTUIdAvailable", ReplyAction="http://tempuri.org/IRealTimeUnit/RTUIdAvailableResponse")]
        System.Threading.Tasks.Task<bool> RTUIdAvailableAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/WriteRtuMessage", ReplyAction="http://tempuri.org/IRealTimeUnit/WriteRtuMessageResponse")]
        string WriteRtuMessage(string message, byte[] signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/WriteRtuMessage", ReplyAction="http://tempuri.org/IRealTimeUnit/WriteRtuMessageResponse")]
        System.Threading.Tasks.Task<string> WriteRtuMessageAsync(string message, byte[] signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/StopRTU", ReplyAction="http://tempuri.org/IRealTimeUnit/StopRTUResponse")]
        string StopRTU(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/StopRTU", ReplyAction="http://tempuri.org/IRealTimeUnit/StopRTUResponse")]
        System.Threading.Tasks.Task<string> StopRTUAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRealTimeUnit/LeavePublicKey")]
        void LeavePublicKey(string path);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRealTimeUnit/LeavePublicKey")]
        System.Threading.Tasks.Task LeavePublicKeyAsync(string path);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRealTimeUnitChannel : DatabaseManager.ScadaCoreReference.IRealTimeUnit, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RealTimeUnitClient : System.ServiceModel.ClientBase<DatabaseManager.ScadaCoreReference.IRealTimeUnit>, DatabaseManager.ScadaCoreReference.IRealTimeUnit {
        
        public RealTimeUnitClient() {
        }
        
        public RealTimeUnitClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RealTimeUnitClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RealTimeUnitClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RealTimeUnitClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddressAvailable(string address) {
            return base.Channel.AddressAvailable(address);
        }
        
        public System.Threading.Tasks.Task<bool> AddressAvailableAsync(string address) {
            return base.Channel.AddressAvailableAsync(address);
        }
        
        public bool RTUIdAvailable(string id) {
            return base.Channel.RTUIdAvailable(id);
        }
        
        public System.Threading.Tasks.Task<bool> RTUIdAvailableAsync(string id) {
            return base.Channel.RTUIdAvailableAsync(id);
        }
        
        public string WriteRtuMessage(string message, byte[] signature) {
            return base.Channel.WriteRtuMessage(message, signature);
        }
        
        public System.Threading.Tasks.Task<string> WriteRtuMessageAsync(string message, byte[] signature) {
            return base.Channel.WriteRtuMessageAsync(message, signature);
        }
        
        public string StopRTU(string id) {
            return base.Channel.StopRTU(id);
        }
        
        public System.Threading.Tasks.Task<string> StopRTUAsync(string id) {
            return base.Channel.StopRTUAsync(id);
        }
        
        public void LeavePublicKey(string path) {
            base.Channel.LeavePublicKey(path);
        }
        
        public System.Threading.Tasks.Task LeavePublicKeyAsync(string path) {
            return base.Channel.LeavePublicKeyAsync(path);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ScadaCoreReference.IAlarmDisplay", CallbackContract=typeof(DatabaseManager.ScadaCoreReference.IAlarmDisplayCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IAlarmDisplay {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmDisplay/AlarmDisplayConnection", ReplyAction="http://tempuri.org/IAlarmDisplay/AlarmDisplayConnectionResponse")]
        string AlarmDisplayConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmDisplay/AlarmDisplayConnection", ReplyAction="http://tempuri.org/IAlarmDisplay/AlarmDisplayConnectionResponse")]
        System.Threading.Tasks.Task<string> AlarmDisplayConnectionAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAlarmDisplayCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAlarmDisplay/DisplayAlarm")]
        void DisplayAlarm(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAlarmDisplayChannel : DatabaseManager.ScadaCoreReference.IAlarmDisplay, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AlarmDisplayClient : System.ServiceModel.DuplexClientBase<DatabaseManager.ScadaCoreReference.IAlarmDisplay>, DatabaseManager.ScadaCoreReference.IAlarmDisplay {
        
        public AlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string AlarmDisplayConnection() {
            return base.Channel.AlarmDisplayConnection();
        }
        
        public System.Threading.Tasks.Task<string> AlarmDisplayConnectionAsync() {
            return base.Channel.AlarmDisplayConnectionAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ScadaCoreReference.IReportManager", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IReportManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ReportAlarmsInPeriod", ReplyAction="http://tempuri.org/IReportManager/ReportAlarmsInPeriodResponse")]
        string ReportAlarmsInPeriod(System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ReportAlarmsInPeriod", ReplyAction="http://tempuri.org/IReportManager/ReportAlarmsInPeriodResponse")]
        System.Threading.Tasks.Task<string> ReportAlarmsInPeriodAsync(System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ReportAlarmsWithSelectedPriority", ReplyAction="http://tempuri.org/IReportManager/ReportAlarmsWithSelectedPriorityResponse")]
        string ReportAlarmsWithSelectedPriority(int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ReportAlarmsWithSelectedPriority", ReplyAction="http://tempuri.org/IReportManager/ReportAlarmsWithSelectedPriorityResponse")]
        System.Threading.Tasks.Task<string> ReportAlarmsWithSelectedPriorityAsync(int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ReportTagValueChangesInPeriod", ReplyAction="http://tempuri.org/IReportManager/ReportTagValueChangesInPeriodResponse")]
        string ReportTagValueChangesInPeriod(System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ReportTagValueChangesInPeriod", ReplyAction="http://tempuri.org/IReportManager/ReportTagValueChangesInPeriodResponse")]
        System.Threading.Tasks.Task<string> ReportTagValueChangesInPeriodAsync(System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ReportLastAnalogInputValues", ReplyAction="http://tempuri.org/IReportManager/ReportLastAnalogInputValuesResponse")]
        string ReportLastAnalogInputValues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ReportLastAnalogInputValues", ReplyAction="http://tempuri.org/IReportManager/ReportLastAnalogInputValuesResponse")]
        System.Threading.Tasks.Task<string> ReportLastAnalogInputValuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ReportLastDigitalInputValues", ReplyAction="http://tempuri.org/IReportManager/ReportLastDigitalInputValuesResponse")]
        string ReportLastDigitalInputValues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ReportLastDigitalInputValues", ReplyAction="http://tempuri.org/IReportManager/ReportLastDigitalInputValuesResponse")]
        System.Threading.Tasks.Task<string> ReportLastDigitalInputValuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ReportValuesOfSelectedID", ReplyAction="http://tempuri.org/IReportManager/ReportValuesOfSelectedIDResponse")]
        string ReportValuesOfSelectedID(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ReportValuesOfSelectedID", ReplyAction="http://tempuri.org/IReportManager/ReportValuesOfSelectedIDResponse")]
        System.Threading.Tasks.Task<string> ReportValuesOfSelectedIDAsync(string ID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportManagerChannel : DatabaseManager.ScadaCoreReference.IReportManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportManagerClient : System.ServiceModel.ClientBase<DatabaseManager.ScadaCoreReference.IReportManager>, DatabaseManager.ScadaCoreReference.IReportManager {
        
        public ReportManagerClient() {
        }
        
        public ReportManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReportManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string ReportAlarmsInPeriod(System.DateTime start, System.DateTime end) {
            return base.Channel.ReportAlarmsInPeriod(start, end);
        }
        
        public System.Threading.Tasks.Task<string> ReportAlarmsInPeriodAsync(System.DateTime start, System.DateTime end) {
            return base.Channel.ReportAlarmsInPeriodAsync(start, end);
        }
        
        public string ReportAlarmsWithSelectedPriority(int priority) {
            return base.Channel.ReportAlarmsWithSelectedPriority(priority);
        }
        
        public System.Threading.Tasks.Task<string> ReportAlarmsWithSelectedPriorityAsync(int priority) {
            return base.Channel.ReportAlarmsWithSelectedPriorityAsync(priority);
        }
        
        public string ReportTagValueChangesInPeriod(System.DateTime start, System.DateTime end) {
            return base.Channel.ReportTagValueChangesInPeriod(start, end);
        }
        
        public System.Threading.Tasks.Task<string> ReportTagValueChangesInPeriodAsync(System.DateTime start, System.DateTime end) {
            return base.Channel.ReportTagValueChangesInPeriodAsync(start, end);
        }
        
        public string ReportLastAnalogInputValues() {
            return base.Channel.ReportLastAnalogInputValues();
        }
        
        public System.Threading.Tasks.Task<string> ReportLastAnalogInputValuesAsync() {
            return base.Channel.ReportLastAnalogInputValuesAsync();
        }
        
        public string ReportLastDigitalInputValues() {
            return base.Channel.ReportLastDigitalInputValues();
        }
        
        public System.Threading.Tasks.Task<string> ReportLastDigitalInputValuesAsync() {
            return base.Channel.ReportLastDigitalInputValuesAsync();
        }
        
        public string ReportValuesOfSelectedID(string ID) {
            return base.Channel.ReportValuesOfSelectedID(ID);
        }
        
        public System.Threading.Tasks.Task<string> ReportValuesOfSelectedIDAsync(string ID) {
            return base.Channel.ReportValuesOfSelectedIDAsync(ID);
        }
    }
}
